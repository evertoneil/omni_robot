#!/usr/bin/env python

import rospy
from std_msgs.msg import Int16
import RPi.GPIO as GPIO

# Set the GPIO modes
GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)

# Set variables for the GPIO motor pins
Motor1_forwards = 1
Motor1_backwards = 2
Motor2_forwards = 3
Motor2_backwards = 4
Motor3_forwards = 5
Motor3_backwards = 6
enable1 = 18
enable2 = 19
enable3 = 20
# How many times to turn the pin on and off each second
Frequency = 20
# How long the pin stays on each cycle, as a percent
DutyCycle = 80
# Setting the duty cycle to 0 means the motors will not turn
Stop = 0

# Set the GPIO Pin mode to be Output
GPIO.setup(Motor1_forwards, GPIO.OUT)
GPIO.setup(Motor1_backwards, GPIO.OUT)
GPIO.setup(Motor2_forwards, GPIO.OUT)
GPIO.setup(Motor2_backwards, GPIO.OUT)
GPIO.setup(Motor3_forwards, GPIO.OUT)
GPIO.setup(Motor3_backwards, GPIO.OUT)
GPIO.setup(enable1, GPIO.OUT)
GPIO.setup(enable2, GPIO.OUT)
GPIO.setup(enable3, GPIO.OUT)

# Set the GPIO to software PWM at 'Frequency' Hertz
pwmMotor1 = GPIO.PWM(enable1, Frequency)
pwmMotor2 = GPIO.PWM(enable2, Frequency)
pwmMotor3 = GPIO.PWM(enable3, Frequency)

# Start the software PWM with a duty cycle of 0 (i.e. not moving)
GPIO.output(Motor1_forwards,GPIO.LOW)
GPIO.output(Motor1_backwards,GPIO.LOW)
GPIO.output(Motor2_forwards,GPIO.LOW)
GPIO.output(Motor2_backwards,GPIO.LOW)
GPIO.output(Motor3_forwards,GPIO.LOW)
GPIO.output(Motor3_backwards,GPIO.LOW)
pwmMotor1.start(Stop)
pwmMotor2.start(Stop)
pwmMotor3.start(Stop)

# Turn all motors off
def StopMotors():
    GPIO.output(Motor1_forwards,Stop)
    GPIO.output(Motor1_backwards,Stop)
    GPIO.output(Motor2_forwards,Stop)
    GPIO.output(Motor2_backwards,Stop)
    GPIO.output(Motor3_forwards,Stop)
    GPIO.output(Motor3_backwards,Stop)
    pwmMotor1.ChangeDutyCycle(Stop)
    pwmMotor2.ChangeDutyCycle(Stop)
    pwmMotor3.ChangeDutyCycle(Stop)

# Turn 3 motors forwards
def Forwards():
    GPIO.output(Motor1_forwards,1)
    GPIO.output(Motor1_backwards,0)
    GPIO.output(Motor2_forwards,1)
    GPIO.output(Motor3_backwards,0)
    GPIO.output(Motor1_forwards,1)
    GPIO.output(Motor1_backwards,0)
    pwmMotor1.ChangeDutyCycle(DutyCycle)
    pwmMotor2.ChangeDutyCycle(DutyCycle)
    pwmMotor3.ChangeDutyCycle(DutyCycle)

# Turn 3 motors backwards
def Backwards():
    GPIO.output(Motor1_forwards,0)
    GPIO.output(Motor1_backwards,1)
    GPIO.output(Motor2_forwards,0)
    GPIO.output(Motor3_backwards,1)
    GPIO.output(Motor1_forwards,0)
    GPIO.output(Motor1_backwards,1)
    pwmMotor1.ChangeDutyCycle(DutyCycle)
    pwmMotor2.ChangeDutyCycle(DutyCycle)
    pwmMotor3.ChangeDutyCycle(DutyCycle)

# Message handler
def CommandCallback(commandMessage):
    command = commandMessage.data
    if command > 50:
        print('Moving forwards')
        Forwards()
    else:
        print('Moving backwards')
        Backwards()

rospy.init_node('driver')
rospy.Subscriber('command', Int16, CommandCallback)

rospy.spin()
print('Shutting down: stopping motors')
StopMotors()
GPIO.cleanup()
