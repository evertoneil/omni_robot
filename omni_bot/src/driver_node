#!/usr/bin/env python

import rospy
from omni_bot.msg import nilai
from omni_bot.msg import jarak
import RPi.GPIO as GPIO
import pigpio
import time


# Set the GPIO & pigpio modes
GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)
pi = pigpio.pi()

#=== Set variables for the GPIO motor pins=====
Motor1_forwards = 20
Motor1_backwards = 16
Motor2_forwards = 26
Motor2_backwards = 13
Motor3_forwards = 24
Motor3_backwards = 23
enable1 = 21
enable2 = 19
enable3 = 18

#===================================
DutyCycle1 = 20
DutyCycle2 = 20
DutyCycle3 = 20
Roda1 = 20
Roda2 = 20
Roda3 = 20
Stop = 0
#====================================================
# Set the GPIO Pin mode to be Output
GPIO.setup(Motor1_forwards, GPIO.OUT)
GPIO.setup(Motor1_backwards, GPIO.OUT)
GPIO.setup(Motor2_forwards, GPIO.OUT)
GPIO.setup(Motor2_backwards, GPIO.OUT)
GPIO.setup(Motor3_forwards, GPIO.OUT)
GPIO.setup(Motor3_backwards, GPIO.OUT)
GPIO.setup(enable1, GPIO.OUT)
GPIO.setup(enable2, GPIO.OUT)
GPIO.setup(enable3, GPIO.OUT)

# Set Motor to Stop
GPIO.output(Motor1_forwards,GPIO.LOW)
GPIO.output(Motor1_backwards,GPIO.LOW)
GPIO.output(Motor2_forwards,GPIO.LOW)
GPIO.output(Motor2_backwards,GPIO.LOW)
GPIO.output(Motor3_forwards,GPIO.LOW)
GPIO.output(Motor3_backwards,GPIO.LOW)
pi.set_PWM_dutycycle(enable1,0)
pi.set_PWM_dutycycle(enable2,0)
pi.set_PWM_dutycycle(enable3,0)
#=======================================================
# Turn all motors off
def StopMotors():
    GPIO.output(Motor1_forwards,Stop)
    GPIO.output(Motor1_backwards,Stop)
    GPIO.output(Motor2_forwards,Stop)
    GPIO.output(Motor2_backwards,Stop)
    GPIO.output(Motor3_forwards,Stop)
    GPIO.output(Motor3_backwards,Stop)
    pi.set_PWM_dutycycle(enable1,0)
    pi.set_PWM_dutycycle(enable2,0)
    pi.set_PWM_dutycycle(enable3,0)
#=============================================
def motora_forwards(a):
    GPIO.output(Motor1_forwards,1)
    GPIO.output(Motor1_backwards,Stop)
    pi.set_PWM_dutycycle(enable1,abs(a))
    print("motor A f " + str(a))

def motora_backwards(b):
    GPIO.output(Motor1_forwards,Stop)
    GPIO.output(Motor1_backwards,1)
    pi.set_PWM_dutycycle(enable1,abs(b))
    print("motor A b " + str(b))
#=============================================
def motorb_forwards(c):
    GPIO.output(Motor2_forwards,1)
    GPIO.output(Motor2_backwards,Stop)
    pi.set_PWM_dutycycle(enable2,abs(c))
    print("motor B f "+ str(c))

def motorb_backwards(d):
    GPIO.output(Motor2_forwards,Stop)
    GPIO.output(Motor2_backwards,1)
    pi.set_PWM_dutycycle(enable2,abs(d))
    print("motor B b "+ str(d))
#=============================================
def motorc_forwards(e):
    GPIO.output(Motor3_forwards,1)
    GPIO.output(Motor3_backwards,Stop)
    pi.set_PWM_dutycycle(enable3,abs(e))
    print("motor C f "+ str(e))

def motorc_backwards(f):
    GPIO.output(Motor3_forwards,Stop)
    GPIO.output(Motor3_backwards,1)
    pi.set_PWM_dutycycle(enable3,abs(f))
    print("motor C b" + str(f))
#=============================================

def calculate_a(x):
    if x>0:
	motora_forwards(x)
    else: 
	motora_backwards(x)

def calculate_b(x):
    if x>0:
	motorb_forwards(x)
    else: 
	motorb_backwards(x)

def calculate_c(x):
    if x>0:
	motorc_forwards(x)
    else: 
	motorc_backwards(x)

def CommandCallback(data):
    global DutyCycle1
    global DutyCycle2
    global DutyCycle3
    DutyCycle1 = data.v1
    DutyCycle2 = data.v2
    DutyCycle3 = data.v3
    calculate_a(DutyCycle1)
    calculate_c(DutyCycle3)
    calculate_b(DutyCycle2)

def CommandCallback2(data):
    global Roda1
    global Roda2
    global Roda3
    Roda1 = data.enc1

def listener():
    global Roda1
    global Roda2
    global Roda3
    rospy.init_node('driver')
    rospy.Subscriber('Value', nilai, CommandCallback)
    rospy.Subscriber('odometry', jarak, CommandCallback2)
    if Roda1 > 5:
	StopMotors()
    rospy.spin()

if __name__ == '__main__':
    listener()


