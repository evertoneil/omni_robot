#!/usr/bin/env python

import rospy
from omni_bot.msg import kecepatan
from omni_bot.msg import counter
from omni_bot.msg import putaran
import RPi.GPIO as GPIO
import pigpio

# Set the GPIO & pigpio modes
GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)
pi = pigpio.pi()

#=== Set variables for the GPIO motor pins=====
Motor1_forwards = 20
Motor1_backwards = 16
Motor2_forwards = 24 
Motor2_backwards = 23 
Motor3_forwards = 19 
Motor3_backwards = 13 
enable1 = 21
enable2 = 18 
enable3 = 26 

#=======set variables====================
freq = 20
DutyCycle1 = 20
DutyCycle2 = 20
DutyCycle3 = 20
Putaran1 = 10
Putaran2 = 10
Putaran3 = 10
Roda1 = 20
Roda2 = 20
Roda3 = 30
Stop = 0
#====================================================
#=====Set the GPIO Pin mode to be Output=============
GPIO.setup(Motor1_forwards, GPIO.OUT)
GPIO.setup(Motor1_backwards, GPIO.OUT)
GPIO.setup(Motor2_forwards, GPIO.OUT)
GPIO.setup(Motor2_backwards, GPIO.OUT)
GPIO.setup(Motor3_forwards, GPIO.OUT)
GPIO.setup(Motor3_backwards, GPIO.OUT)
GPIO.setup(enable1, GPIO.OUT)
GPIO.setup(enable2, GPIO.OUT)
GPIO.setup(enable3, GPIO.OUT)

#======initialize motor to Stop=========================
GPIO.output(Motor1_forwards,GPIO.LOW)
GPIO.output(Motor1_backwards,GPIO.LOW)
GPIO.output(Motor2_forwards,GPIO.LOW)
GPIO.output(Motor2_backwards,GPIO.LOW)
GPIO.output(Motor3_forwards,GPIO.LOW)
GPIO.output(Motor3_backwards,GPIO.LOW)
pi.set_PWM_frequency(enable1,freq)
pi.set_PWM_frequency(enable2,freq)
pi.set_PWM_frequency(enable3,freq)
pi.set_PWM_dutycycle(enable1,0)
pi.set_PWM_dutycycle(enable2,0)
pi.set_PWM_dutycycle(enable3,0)
#=======================================================
# Turn all motors off

def StopMotors():
    GPIO.output(Motor1_forwards,Stop)
    GPIO.output(Motor1_backwards,Stop)
    GPIO.output(Motor2_forwards,Stop)
    GPIO.output(Motor2_backwards,Stop)
    GPIO.output(Motor3_forwards,Stop)
    GPIO.output(Motor3_backwards,Stop)
    pi.set_PWM_dutycycle(enable1,0)
    pi.set_PWM_dutycycle(enable2,0)
    pi.set_PWM_dutycycle(enable3,0)
#==========================================
def stop1():
    GPIO.output(Motor1_forwards,Stop)
    GPIO.output(Motor1_backwards,Stop)
    pi.set_PWM_dutycycle(enable1,0)
#------------------------------------------------
def stop2():
    GPIO.output(Motor2_forwards,Stop)
    GPIO.output(Motor2_backwards,Stop)
    pi.set_PWM_dutycycle(enable2,0)
#---------------------------------------------
def stop3():
    GPIO.output(Motor3_forwards,Stop)
    GPIO.output(Motor3_backwards,Stop)
    pi.set_PWM_dutycycle(enable3,0)
#===========================================
#======== Moving motors =====================
def motora_forwards(a):
    GPIO.output(Motor1_forwards,1)
    GPIO.output(Motor1_backwards,Stop)
    pi.set_PWM_dutycycle(enable1,abs(a))

def motora_backwards(b):
    GPIO.output(Motor1_forwards,Stop)
    GPIO.output(Motor1_backwards,1)
    pi.set_PWM_dutycycle(enable1,abs(b))
#=============================================
def motorb_forwards(c):
    GPIO.output(Motor2_forwards,1)
    GPIO.output(Motor2_backwards,Stop)
    pi.set_PWM_dutycycle(enable2,abs(c))

def motorb_backwards(d):
    GPIO.output(Motor2_forwards,Stop)
    GPIO.output(Motor2_backwards,1)
    pi.set_PWM_dutycycle(enable2,abs(d))
#=============================================
def motorc_forwards(e):
    GPIO.output(Motor3_forwards,1)
    GPIO.output(Motor3_backwards,Stop)
    pi.set_PWM_dutycycle(enable3,abs(e))

def motorc_backwards(x):
    GPIO.output(Motor3_forwards,Stop)
    GPIO.output(Motor3_backwards,1)
    pi.set_PWM_dutycycle(enable3,abs(x))

#=============================================
#==========set motor CW or CCW================
def calculate_a(x):
    if x>0:
	motora_forwards(x)
    else: 
	motora_backwards(x)

def calculate_b(x):
    if x>0:
	motorb_forwards(x)
    else: 
	motorb_backwards(x)

def calculate_c(x):
    if x>0:
	motorc_forwards(x)
    else: 
	motorc_backwards(x)
#==================================================
#==================================================

def CommandCallback(data):
    global DutyCycle1,DutyCycle2,DutyCycle3
    DutyCycle1 = data.v1
    DutyCycle2 = data.v2
    DutyCycle3 = data.v3
    calculate_c(DutyCycle3)
    calculate_a(DutyCycle1)
    calculate_b(DutyCycle2)

def CommandCallback2(data):
    global Putaran1,Putaran2,Putaran3
    Putaran2 = data.deg2
    Putaran1 = data.deg1
    Putaran3 = data.deg3

def CommandCallback3(data):
    global Roda1,Roda2,Roda3
    Roda1 = data.enc1
    Roda2 = data.enc2
    Roda3 = data.enc3
#==========================================================
def listener():
    rospy.init_node('driver')
    msg = rospy.wait_for_message('kecepatan',kecepatan,timeout=None)
    CommandCallback(msg)
    put = rospy.wait_for_message('putaran',putaran,timeout=None)
    CommandCallback2(put)
    rospy.Subscriber('counter', counter, CommandCallback3)
    while not rospy.is_shutdown():
	if abs(Roda2) > abs(Putaran2):
		stop2()
	if abs(Roda1) > abs(Putaran1):
		stop1()
	if abs(Roda3) > abs(Putaran3):
		stop3()
#=====================================================
if __name__ == '__main__':
    listener()
